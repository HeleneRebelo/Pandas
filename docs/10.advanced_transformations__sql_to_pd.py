# -*- coding: utf-8 -*-
"""CÃ³pia de 10-advanced-transformations__sql-to-pd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/192dcJRIDG9rmz_jy8MC4xz2O5hLAZzjk

# From SQL to pandas challenge 10
"""

# import libraries
import pandas as pd
import numpy as np

# load data
# This code is made to load our data stored on Google Drive
def gd_path(file_id):
    """Generate a shareable link from Google Drive file id."""
    return f"https://drive.google.com/uc?export=download&id={file_id}"

# Google Drive file ids
files_id = {
    "titles": "1PLdn50N9GRa53ZbuVWo0l47F_IXdvlEm",
    "sales": "1fzFc9rwYmVIPaGOFmhLVxCi3kg19vNU2",
}

# Read data from Google Drive
sales = pd.read_csv(gd_path(files_id["sales"]), sep=";")
titles = pd.read_csv(gd_path(files_id["titles"]), sep=";")

"""## 1. Select everything from the sales table and create a new column called "sales_category" to categorise qty:
   
		qty >= 50 high sales
		20 <= qty < 50 medium sales
		qty < 20 low sales
"""

(
    sales
    .assign(sales_category = sales.qty.apply(
        lambda qty:
          'high'   if qty >= 50 else
          'medium' if qty >= 20 else
          'low'
    ))
)

"""### Hint:

In SQL the syntax is:

```sql
SELECT *,
CASE
    WHEN qty >= 50 THEN "high sales"
    WHEN qty >= 20 THEN "medium sales"
    ELSE "low sales"
END AS sales_category
FROM sales;
```

## 2. Adding to your answer from the previous question. Find out the total amount of books sold (qty) in each sales category
    i.e. How many books had high sales, how many had medium sales, and how many had low sales
"""

(
    sales
    .assign(sales_category = sales.qty.apply(
        lambda qty:
          'high'   if qty >= 50 else
          'medium' if qty >= 20 else
          'low'
    ))
    .groupby('sales_category')
    .agg(total_sales = ('qty', 'sum'))
    .loc[['low', 'medium', 'high'], :]
    .reset_index()
)

"""### Hint:

In SQL the syntax is:

```sql
SELECT sum(qty),
CASE
	WHEN qty>=50 THEN 'high sales'
    WHEN (qty>=20 AND qty<50) THEN 'medium sales'
    ELSE 'low sales'
END AS sales_category
FROM sales
GROUP BY sales_category;
```

## 3. Adding to your answer from the previous questions: output only those sales categories that have a SUM(qty) greater than 100, and order them in descending order
"""

(
    sales
    .assign(sales_category = sales.qty.apply(
        lambda qty:
          'high'   if qty >= 50 else
          'medium' if qty >= 20 else
          'low'
    ))
    .groupby('sales_category')
    .agg(total_sales = ('qty', 'sum'))
    [lambda result: result.total_sales >= 100]
    .sort_values(by='total_sales', ascending=False)
)

"""### Hint:

In SQL the syntax is:

```sql
SELECT sum(qty),
CASE
    WHEN qty>=50 THEN 'high sales'
    WHEN (qty>=20 AND qty<50) THEN 'medium sales'
    ELSE 'low sales'
END AS sales_category
FROM sales
GROUP BY sales_category
HAVING sum(qty)>100
ORDER BY sum(qty) DESC;
```

## 4. Find out the average book price, per publisher, for the following book types and price categories:
		book types: business, traditional cook and psychology
		price categories: <= 5 super low, <= 10 low, <= 15 medium, > 15 high
        
        - When displaying the average prices, use ROUND() to hide decimals.
"""

(
    titles[titles.type.isin(['business', 'trad_cook', 'psychology'])]
    .assign(
        price_category = titles.price.apply(
            lambda price:
            'super low' if price <= 5 else
            'low' if price <= 10 else
            'medium' if price <= 15 else
            'high'
        )
    )
    .groupby(['pub_id', 'type', 'price_category'])
    .agg(average_price=('price', 'mean'))
    .assign(
        average_price =
            lambda x: round(x.average_price).astype('int')
    )
)

"""### Hint:

In SQL the syntax is:

```sql
SELECT
    ROUND(AVG(price)),
    type,
    pub_id,
CASE
    WHEN price <= 5 THEN 'super low'
    WHEN (price > 5 AND price <= 10) THEN 'low'
    WHEN (price > 10 AND price <= 15) THEN 'medium'
    ELSE 'high'
END AS price_category
FROM titles
GROUP BY
    pub_id,
    type,
    price_category
HAVING
    type IN ('business', 'trad_cook', 'psychology');
```
"""

