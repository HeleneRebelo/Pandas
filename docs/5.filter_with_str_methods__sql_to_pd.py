# -*- coding: utf-8 -*-
"""5-filter-with-str-methods__sql-to-pd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uwROXmegylCJjUmAKKCJ98uZ-RfyeUcG

# From SQL to Pandas Challenges 5
"""

# import libraries
import pandas as pd

# load data
# This code is made to load our data stored on Google Drive
def gd_path(file_id):
    """Generate a shareable link from Google Drive file id."""
    return f"https://drive.google.com/uc?export=download&id={file_id}"

# Google Drive file ids
files_id = {
    "titles": "1PLdn50N9GRa53ZbuVWo0l47F_IXdvlEm",
    "stores": "1f-GCgip7O93CpbAkYvOsc21eKnSOSHsQ",
    "employee": "1h9mUjsVqpP74b1w0x7KOw37n_n9Ulkt5",
    "authors": "1fEF89Nhe61EebAljKlwFwfEuokK0o6aJ"
}

# Read data from Google Drive
authors = pd.read_csv(gd_path(files_id["authors"]), sep=";")
titles = pd.read_csv(gd_path(files_id["titles"]), sep=";")
stores = pd.read_csv(gd_path(files_id["stores"]), sep=";")
employee = pd.read_csv(gd_path(files_id["employee"]), sep=";")

"""## 1.&nbsp;Select all books from the table `titles` that contain the word "cooking" in its title"""

titles[titles['title'].str.contains('cooking', case=False)]

"""### Hint:

In SQL the syntax is:

```sql
SELECT title
FROM titles
WHERE title LIKE '%cooking%';
```

## 2.&nbsp;Select all titles that start with the word "The"
"""

titles[titles['title'].str.startswith('The')]

# OR
titles.loc[titles['title'].str.contains("The"),:]

"""### Hint:

In SQL the syntax is:

```sql
SELECT title
FROM titles
WHERE title LIKE 'The%';
```

## 3.&nbsp;Select the full names (first and last name) of authors whose last name starts with "S"
"""

authors

authors.loc[authors['au_lname'].str.startswith('S'), ['au_fname', 'au_lname']]

"""### Hint:

In SQL the syntax is:

```sql
SELECT au_fname, au_lname
FROM authors
WHERE au_lname LIKE('S%');
```

## 4.&nbsp;Select the name and address of all stores located in an Avenue (its address ends with "Ave.")
"""

stores

stores.loc[(stores['stor_address'].str.contains("Ave.")), ('stor_name','stor_address')]

# OR
stores.loc[stores['stor_address'].str.endswith('Ave.'), ['stor_name', 'stor_address']]

"""### Hint:

In SQL the syntax is:

```sql
SELECT stor_name, stor_address
FROM stores
WHERE stor_address LIKE ("%Ave.");
```

## 5.&nbsp;Select the name and address of all stores located in an Avenue or in a Street (address ended in "St.")
"""

stores.loc[(stores['stor_address'].str.contains("Ave."))|(stores['stor_address'].str.contains("St.")), ('stor_name','stor_address')]

stores.loc[stores['stor_address'].str.endswith('Ave.') | stores['stor_address'].str.endswith('St.'), ['stor_name', 'stor_address']]

"""### Hint:

In SQL the syntax is:

```sql
SELECT
	stor_name,
	stor_address
FROM
	stores
WHERE
	stor_address LIKE '%St.'
    OR stor_address LIKE '%Ave.';
```

## 6.&nbsp;Look at the "employee" table (select all columns to explore the raw data):
   Find a pattern that reveals whether an employee is Female or Male.
   Select all female employees.
"""

employee.head()

employee.loc[employee.emp_id.str.endswith("F"),:]

# OR
employee.loc[employee.emp_id.str.endswith('F'), ['emp_id', 'fname', 'lname']]

"""### Hint:

In SQL the syntax is:

```sql
SELECT emp_id, fname,lname
FROM employee
WHERE emp_id LIKE ('%F');
```

## 7.&nbsp;Select the first and last names of all male employees whose name starts with "P".
"""

employee.loc[
    employee.emp_id.str.endswith('M')
    & (employee.fname.str.startswith('P')
      | employee.lname.str.startswith('P')),
    ['fname', 'lname']]

"""### Hint:

In SQL the syntax is:

```sql
SELECT
    emp_id,
    fname,
    lname
FROM
    employee
WHERE
    (fname LIKE 'P%'
    OR lname LIKE 'P%')
    AND emp_id LIKE '%M';
```

## [BONUS] 8. Select all books that have an "ing" in the title, with at least 4 other characters preceding it.
For example, 'cooking' has 4 characters before the
   'ing', so this should be included; 'sewing' has only 3 characters before the
   'ing', so this shouldn't be included.
"""

titles[titles.title.str.contains('\S{4}ing')]

# OR
titles.loc[titles['title'].str.contains('\S{4}ing')]

"""### Hint:

In SQL the syntax is:

```sql
SELECT title
FROM titles
WHERE title LIKE "%____ing%";
```
"""