# -*- coding: utf-8 -*-
"""CÃ³pia de pandas-str-bonus-challenges.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UadW2qxJU3sE9-KTGBM7Wkfgq0-t1D-h

# [BONUS] Cars challenges

###### **Exercise 1:**
read the `vehicles.csv` and set it to a variable called `cars`. We will use it for some extra challenges.
"""

# vehicles.csv https://drive.google.com/file/d/18zYGrzRhn_mz1HJLXxSO_MwR0_nWBS3K/view?usp=sharing
import pandas as pd
def gd_path(file_id):
    """Generate a shareable link from Google Drive file id."""
    return f"https://drive.google.com/uc?export=download&id={file_id}"
cars = pd.read_csv(gd_path('18zYGrzRhn_mz1HJLXxSO_MwR0_nWBS3K'))
cars.head()

"""###### **Exercise 2:**
create a column called `Auto` filled with either `True` or `False` depending on whether the transmission is Automatic or not.
"""

cars['Auto'] = cars['Transmission'].str.contains('Auto')
cars.head(20)

"""###### **Exercise 3:**
create a column called `Speeds` that contains the number of speeds each transmission has, based on the number that appears in the column `Transmission`. For example, a transmission named "Automatic 4-spd" has 4 speeds, and one named "Auto (AM6)" has 6 speeds. If you find edge cases (e.g. numbers that do not make sense, no number at all...), use your own judgement to assign values to them.

Note: you will most likely need to use a "Regular Expression" (or "regex") inside of the string method. Regular expressions are sequences of characters designed to match patterns. They can become really complex (to match complex patterns), but for this case, a simple [5 minute tutorial](https://www.youtube.com/watch?v=UQQsYXa1EHs&ab_channel=Kite) or some googling should be enough. Whenever you see people writing regex in plain python, remember that you can use any regular expression directly inside of a Pandas `str` method.
"""

import math
cars['Speeds'] = pd.to_numeric(
    cars.Transmission.str.extract(r'(\d+)').iloc[:,0],
    downcast='integer').replace(math.nan, 0)
cars

"""###### **Exercise 4:**
remove non-alphanumeric characters from the "Drivetrain" and the "Make" column
"""

cars[['Drivetrain', 'Make']] = cars[['Drivetrain', 'Make']].replace(r'[^A-Za-z0-9 ]', ' ', regex=True)
cars