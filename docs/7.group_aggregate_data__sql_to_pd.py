# -*- coding: utf-8 -*-
"""7-group-aggregate-data__sql-to-pd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s98hqDCkuQgruP55sOE4uYMF1z4Ol3vd

# From SQL to pandas challenge 7
"""

# import libraries
import pandas as pd

# load data
# This code is made to load our data stored on Google Drive
def gd_path(file_id):
    """Generate a shareable link from Google Drive file id."""
    return f"https://drive.google.com/uc?export=download&id={file_id}"

# Google Drive file ids
files_id = {
    "titles": "1PLdn50N9GRa53ZbuVWo0l47F_IXdvlEm",
    "sales": "1fzFc9rwYmVIPaGOFmhLVxCi3kg19vNU2",
    "employee": "1h9mUjsVqpP74b1w0x7KOw37n_n9Ulkt5",
    "authors": "1fEF89Nhe61EebAljKlwFwfEuokK0o6aJ"
}

# Read data from Google Drive
authors = pd.read_csv(gd_path(files_id["authors"]), sep=";")
titles = pd.read_csv(gd_path(files_id["titles"]), sep=";")
sales = pd.read_csv(gd_path(files_id["sales"]), sep=";")
employee = pd.read_csv(gd_path(files_id["employee"]), sep=";")

"""## 1.&nbsp;Find the total amount of authors for each state"""

authors.value_counts('state')

# OR
authors.groupby(['state']).agg( {'state':['count']} )

# OR
authors.groupby('state').au_id.count()

"""### Hint:

In SQL the syntax is:

```sql
SELECT COUNT(au_id) , state
FROM authors
group by state;
```

## 2.&nbsp;Find the total amount of authors by each state and order them in descending order
"""

authors.groupby('state').au_id.count().sort_values(ascending=False)

"""### Hint:

In SQL the syntax is:

```sql
SELECT COUNT(au_id) Total,state
FROM authors
GROUP BY state
ORDER BY (total) DESC;
```

## 3.&nbsp;What's the price of the most expensive title from each publisher?
"""

titles.groupby('pub_id').price.max()

"""### Hint:

In SQL the syntax is:

```sql
SELECT MAX(price), pub_id
FROM titles
GROUP BY pub_id;
```

## 4.&nbsp;Find out the top 3 stores with the most sales
"""

sales.groupby('stor_id').qty.sum().sort_values(ascending=False).head(3)

"""### Hint:

In SQL the syntax is:

```sql
SELECT stor_id, SUM(qty)
FROM sales
GROUP BY stor_id
ORDER BY SUM(qty) DESC
LIMIT 3;
```

## 5.&nbsp;Find the average job level for each job_id from the employees table.
"""

employee.groupby('job_id').job_lvl.mean().sort_values()

"""### Hint:

In SQL the syntax is:

```sql
SELECT AVG(job_lvl), job_id
FROM employee
GROUP BY job_id
ORDER BY AVG(job_lvl);
```

## 6.&nbsp;For each type (business, psychologyâ€¦), find out how many books each publisher has
"""

titles.groupby(['pub_id', 'type']).title_id.count()

"""### Hint:

In SQL the syntax is:

```sql
SELECT pub_id, type, COUNT(title_id)
FROM titles
GROUP BY pub_id , type;
```

## 7.&nbsp;Add the average price of each publisher - book type combination from your previous query
"""

titles.groupby(['pub_id', 'type']).agg({'title_id': 'count', 'price': 'mean'})

"""### Hint:

In SQL the syntax is:

```sql
SELECT  AVG(price), COUNT(*), pub_id,type
FROM titles
GROUP BY pub_id, type;
```

# BONUS

This is part of the section Advanced Pandas.

## 8.&nbsp;From your previous query, keep only the combinations of publisher - book type with an average price higher than 12
"""

titles.groupby(['pub_id', 'type']).agg(count = ('title_id', 'count'), avg_price = ('price', 'mean'))[lambda results: results['avg_price'] > 12]

"""### Hint:

In SQL the syntax is:

```sql
SELECT pub_id,type, COUNT(*)
FROM titles
GROUP BY pub_id, type
HAVING AVG(price) > 12;
```

## 9.&nbsp;Order the results of your previous query by these two criteria:
1. Count of books, descendingly
2. Average price, descendingly
"""

titles.groupby(['pub_id', 'type']) \
  .agg(count = ('title_id', 'count'), avg_price = ('price', 'mean')) \
  [lambda results: results['avg_price'] > 12] \
  .sort_values(by=['count', 'avg_price'], ascending=[False, False])

"""### Hint:

In SQL the syntax is:

```sql
SELECT  pub_id, type, COUNT(*), AVG(price)
FROM titles
GROUP BY pub_id, type
HAVING AVG(price) > 12
ORDER BY COUNT(*) DESC, AVG(price) DESC;
```

## 10.&nbsp;Some authors have a contract, while others don't - it's indicated in the "contract" column of the authors table.
     
    Select all the states and cities where there are 2 or more contracts overall
"""

authors.groupby(['city', 'state']).agg(contracts=('contract', 'sum')) \
  [lambda results: results['contracts'] >= 2]

"""### Hint:

In SQL the syntax is:

```sql
SELECT SUM(contract),city,state
FROM authors
GROUP BY state,city
HAVING SUM(contract)>1;
```
"""