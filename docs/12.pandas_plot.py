# -*- coding: utf-8 -*-
"""12-pandas-plot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dZndokuLsjbQ-gfqiY3pIe2QUn6-bU-y

# Data Visualization

Data visualization is an important part of data science, it allows us to explore our data, as well as present our findings to others. There are many python libraries that allow you to create beautiful plots. Today we will only look a the `.plot()` function that's built in to pandas. This function is super useful as it's very easy to use, and allows us to make very quick, basic plots, from which we can explore our data.

As always, let's start by loading some data. We will start with the small `people_csv`, so that it's easier to understand what's going on:
"""

import pandas as pd

url = 'https://drive.google.com/file/d/15s7M2QllSR1GyNWM8RgcgabK-4hlMgpk/view?usp=sharing' # people.csv
path = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]
people = pd.read_csv(path)

# show dataframe
people

"""In this notebook we will show you a couple of quick ways to make plots without leaving the pandas module:
1. plotting 1 variable (1 column of the DataFrame)
2. plotting 2 or more variables (2 or more columns of the DataFrame)

## 1.&nbsp;  Plotting 1 variable

Pandas `.hist()` and `.plot()` methods are incredibly convenient, and more than enough when you are visualizing data for yourself, as part of the exploration process.

A histogram is a representation of the distribution of numerical data. Let's remind ourselves of how a histogram looks:
"""

people.hist();

# histogram of the age column
people["age"].hist();

"""From the histogram above we can see that most of the people in our DataFrame are in their late 20s. We can also see that we have just one person under 10 years of age, and one person over 60.

Pandas plotting is limited in terms of tweaking/customizing the plot, but you can still change some basic stuff, like the number of bins in a histogram or the figure size:
"""

# bins are the amount of coulmns the histogram is divided into. The more bins, the finer the detail that can be seen
# try changing the number of bins and running this cell again, how has the histogram changed?

# why not try also changing the figsize numbers one at a time and running the cell again, what changed?

people.age.hist(bins=10, figsize=(12,6));

"""For simple frequency plots, which show us how many values are in each category:

1. You should first group the categories and generate the frequencies with `value_counts()`

2. You should use a **bar plot** not a histogram as we're now using categorical data, not numerical
  - Numerical data - histogram
  - Categorical data - bar plot

Let's see this in action:
"""

# 1. group the categories and generate the frequencies with value_counts()
#  olor_freq = people.favourite_color.value_counts() -  OU
color_freq = people["favourite_color"].value_counts()
color_freq

# 2. plot our value_counts from above as a bar plot
# color_freq.plot.bar();
color_freq.plot(kind = "bar", title="Favourite Color");

"""Similar to the `.hist()`, there are some parameters available in `.plot()` that you can use to improve your plots, such as color or size. The documentation is always the ultimate source of truth when it comes to understanding which parameters you can tweak and how to do it:

- [These are the docs specifically for `DataFrame.plot.bar()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.bar.html)
- [Here are the docs for `DataFrame.plot()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot), with arguments that apply to all types of plots, not just bar plots.
"""

# changing the colors of the bars
color_freq.plot.bar(color=["blue", "red", "yellow", "gray", "orange"]);

"""###### **Exercise 1:**
Make a bar plot for the countries where people are from. Highlight India (IN) in a brighter color.
> Tip: if you want to use prettier colors, you'll find some [here](https://matplotlib.org/stable/gallery/color/named_colors.html)


"""

country_freq=people.country.value_counts()
country_freq.plot.barh(color=[ 'turquoise' if country == 'IN' else 'steelblue' for country in country_freq.index])

"""## 2.&nbsp; Plotting 2 or more variables

Whenever you want to see if there is a relationship between two numerical variables, you could compute something complicated like a linear correlation coefficient or perform more sophisticated statistical tests, but nothing beats a good scatter plot:
"""

people.plot.scatter(x="age", y="sibilings");

"""Scatter plots allow us to quickly see a strong/weak correlation at a glance. You can see a slight trend in the above scatter plot, showing that, on the whole, older people tend to have more siblings than younger one's."""

people.plot.barh(x="age", y="sibilings");

"""Let's tweak some of the scatter plots parameters:

- The `c` argument allows **colors** to depend on the values of another (numerical) column.
- The `cmap` argument allows the usage of "**color maps**" to fill the dots. See all available cmaps [here](https://matplotlib.org/stable/tutorials/colors/colormaps.html)
- The `s` argument modifies the **size of the dots**.
- The `figsize` argument defines the **size of the whole plot**.

> **Note:** Some of these options might only be available if you have one of the latest Pandas versions, as `pandas.plot()` is one of the areas where pandas is growing. You can check your pandas version with `pd.__version__` in the notebook. If your version is substantially older than the one shown in [here](https://pandas.pydata.org/docs/index.html), consider updating pandas by typing on your Terminal `pip install --upgrade pandas`.
"""

# This is the same scatter plot as above, just bigger, more colorful, and now with an added third variable 'credit'.
people.plot.scatter(x="age",
                    y="sibilings",
                    c="credit",
                    s=500,
                    cmap="viridis",
                    figsize=(12,8)
                   );

"""## 3.&nbsp; Challenges:
Use the `vehicles.csv` dataset to create the plots in the following exercises.
"""

url = 'https://drive.google.com/file/d/18zYGrzRhn_mz1HJLXxSO_MwR0_nWBS3K/view?usp=sharing' # vehicles.csv
path = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]
cars = pd.read_csv(path)

#Add a column that states if a car's transmission is automatic or manual:
cars["Auto"] = cars["Transmission"].str.contains("Automatic")

"""###### **Exercise 2:**
how many cars have Automatic or Manual transmission?

As we are only plotting 1 variable, please feel free to check out the section above `Plotting 1 variable`


"""

cars.Auto.value_counts().plot.barh(color=[ 'turquoise' if country == 'IN' else 'steelblue' for country in country_freq.index])

cars

"""###### **Exercise 3:**
how many cars have each type of Drivetrain? Highlight "All-Wheel Drive" in a different color to everything else

###### **Exercise 4:**
represent the relationship between fuel consumption (`Combined MPG`) and the number of `Cylinders` a car has, using a scatterplot:

  > **Tip**: we went through scatter plots in the section above `Plotting 2 or more variables`
"""

drivetrain_freq = cars.Drivetrain.value_counts()
drivetrain_freq.plot.barh(color=[ 'turquoise' if label == 'All-Wheel Drive' else 'steelblue' for label in drivetrain_freq.index])

"""###### **Exercise 5:**
explore the same relationship as in exercise 4, but this time use a [boxplot](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.boxplot.html):
"""

cars.boxplot(by='Cylinders', column='Combined MPG');

"""###### **Exercise 6:**
create a plot that displays the evolution of the average CO2 emissions by cars over the years.
  > **Tip**: first you'll need to find the average CO2 per year, and then plot this


"""

cars.groupby('Year')['CO2 Emission Grams/Mile'].mean().plot.line(title='Average COâ‚‚ Emission [g/mile]', ylabel='ylabel');