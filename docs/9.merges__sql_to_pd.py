# -*- coding: utf-8 -*-
"""CÃ³pia de 9-merges__sql-to-pd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HywTwo7wE8nGRrujskGtQcFFv4lGLf7A
"""

# import libraries
import pandas as pd

# load data
# This code is made to load our data stored on Google Drive
def gd_path(file_id):
    """Generate a shareable link from Google Drive file id."""
    return f"https://drive.google.com/uc?export=download&id={file_id}"

# Google Drive file ids
files_id = {
    "titles": "1PLdn50N9GRa53ZbuVWo0l47F_IXdvlEm",
    "stores": "1f-GCgip7O93CpbAkYvOsc21eKnSOSHsQ",
    "sales": "1fzFc9rwYmVIPaGOFmhLVxCi3kg19vNU2",
    "publishers": "1s9E8_AVOziTrowb3wyh2jg3PV763VOyq",
    "pub_info": "1OEgogcGKy--EpuVj0kqq7lyBZNGW6YSv",
    "jobs": "1V1Za8hUdXD-vJOyRdX4aQV5wanIff2eM",
    "employee": "1h9mUjsVqpP74b1w0x7KOw37n_n9Ulkt5",
    "discounts": "111dvSxMcCsTgOuV1wDSKFJxO1Xcxd9VS",
}

# Read data from Google Drive
sales = pd.read_csv(gd_path(files_id["sales"]), sep=";")
titles = pd.read_csv(gd_path(files_id["titles"]), sep=";")
employee = pd.read_csv(gd_path(files_id["employee"]), sep=";")
stores = pd.read_csv(gd_path(files_id["stores"]), sep=";")
publishers = pd.read_csv(gd_path(files_id["publishers"]), sep=";")
# Replace the logos pandas can't read with '?'
pub_info = pd.read_csv(gd_path(files_id["pub_info"]), sep=";", encoding_errors = 'replace')
discounts = pd.read_csv(gd_path(files_id["discounts"]), sep=";")
jobs = pd.read_csv(gd_path(files_id["jobs"]), sep=";")

"""# From SQL to pandas challenge 9

##  1.&nbsp;Select the table sales, assigning the alias "s" to it.
   Select the column ord_num using the syntax `table_alias[column]`
"""

s = sales
s.ord_num

"""### Hint:

In SQL the syntax is:

```sql
SELECT s.ord_num
FROM sales AS s;
```

## 2.&nbsp;Select the title and publisher name of all books
"""

t, p = titles, publishers
(
    t.merge(p, on='pub_id', how='left')
    [['title', 'pub_name']]
)

"""### Hint:

In SQL the syntax is:

```sql
SELECT t.title, p.pub_name
FROM titles t
LEFT JOIN publishers p ON t.pub_id = p.pub_id;
```

## 3.&nbsp;Select the order number, quantity and book title for all sales.
"""

(
    sales.join(titles.set_index('title_id'), on='title_id')
    [['ord_num', 'qty', 'title']]
)

"""### Hint:

In SQL the syntax is:

```sql
SELECT ord_num, qty, titles.title
FROM sales
LEFT JOIN titles
ON sales.title_id=titles.title_id;
```

## 4.&nbsp;Select the full name of all employees and the name of the publisher they work for
"""

E, P = employee, publishers
(
    E.join(P.set_index('pub_id'), on='pub_id')
    .assign(full_name =
        E.fname
      + E.minit.apply(lambda minit:
          f' {minit}.' if pd.notnull(minit) else '')
      + ' '
      + E.lname)
    [['full_name', 'pub_name']]
)

"""### Hint:

In SQL the syntax is:

```sql
Select E.fname,E.lname,P.pub_name
from employee E
left join publishers P
on E.pub_id=P.pub_id;
```

## 5.&nbsp;Select the full name and job description of all employees.
"""

E, J = employee, jobs
(
    E.join(J.set_index('job_id'), on='job_id')
    .assign(full_name =
        E.fname
      + E.minit.apply(lambda minit:
          f' {minit}.' if pd.notnull(minit) else '')
      + ' '
      + E.lname)
    [['full_name', 'job_desc']]
)

"""### Hint:

In SQL the syntax is:

```sql
SELECT fname, lname, job_desc
FROM employee
LEFT JOIN jobs
ON employee.job_id = jobs.job_id;
```

## 6.&nbsp;Select the full name, job description and publisher name of all employees
   Hint: you will have to perform 2 joins in a single query to merge 3 tables together.
"""

E, P, J = employee, publishers, jobs
(
    E.join(P.set_index('pub_id'), on='pub_id')
    .join(J.set_index('job_id'), on='job_id')
    .assign(full_name =
        E.fname
      + E.minit.apply(lambda minit:
          f' {minit}.' if pd.notnull(minit) else '')
      + ' '
      + E.lname)
    [['full_name', 'job_desc', 'pub_name']]
)

"""### Hint:

In SQL the syntax is:

```sql
SELECT fname, lname, job_desc, pub_name
FROM employee
LEFT JOIN publishers
ON employee.pub_id = publishers.pub_id
LEFT JOIN jobs
ON employee.job_id = jobs.job_id;
```

## 7.&nbsp;Select the full name, job description and publisher name of employees that work for Binnet & Hardley.
"""

E, P, J = employee, publishers, jobs
(
    E.join(P[P.pub_name == 'Binnet & Hardley'].set_index('pub_id'), on='pub_id', how='inner')
    .join(J.set_index('job_id'), on='job_id')
    .assign(full_name =
        E.fname
      + E.minit.apply(lambda minit:
          f' {minit}.' if pd.notnull(minit) else '')
      + ' '
      + E.lname)
    [['full_name', 'job_desc', 'pub_name']]
)

# OR
E, P, J = employee, publishers, jobs
(
    E.join(P.set_index('pub_id'), on='pub_id', how='inner')
    .join(J.set_index('job_id'), on='job_id')
    [lambda result: result.pub_name == 'Binnet & Hardley']
    .assign(full_name =
        E.fname
      + E.minit.apply(lambda minit:
          f' {minit}.' if pd.notnull(minit) else '')
      + ' '
      + E.lname)
    [['full_name', 'job_desc', 'pub_name']]
)

"""### Hint:

In SQL the syntax is:

```sql
SELECT fname, lname, job_desc, pub_name
FROM employee
LEFT JOIN publishers
ON employee.pub_id=publishers.pub_id
LEFT JOIN jobs
ON employee.job_id=jobs.job_id
WHERE pub_name='Binnet & Hardley';
```

## 8.&nbsp;Select the name and PR Info (from the pub_info table) from all publishers based in Berkeley, California.
"""

(
    publishers[(publishers.city == 'Berkeley') & (publishers.state == 'CA')]
    .join(pub_info.set_index('pub_id'), on='pub_id')
    [['pub_name', 'pr_info']]
)

"""### Hint:

In SQL the syntax is:

```sql
select pub_name, pub_info.pr_info
from publishers
left join pub_info
on pub_info.pub_id = publishers.pub_id
where city in ("Berkeley") and state='CA';

```

## 9.&nbsp;Selet all columns from the discounts table.
   Observe the columns it has and now some of them are filled with NULL values.
"""

discounts

"""### Hint:

In SQL the syntax is:

```sql
SELECT * FROM discounts;
```

## 10.&nbsp;Select all store names, their store id and the discounts they offer.

	   - When selecting the store id, select it two times: from the stores table
         and from the discounts table.
         
       - ALL stores should be displayed, even if they don't offer any discount
         (i.e. have a NULL value on the discount column).
"""

(
    stores.join(
        discounts.set_index('stor_id', drop=False), on='stor_id', rsuffix='_discount')
    [['stor_id_discount', 'discount', 'stor_id', 'stor_name' ]]
)

"""### Hint:

In SQL the syntax is:

```sql
SELECT d.stor_id AS disstor, d.discount, s.stor_id AS storid, s.stor_name
FROM discounts AS d
RIGHT JOIN stores AS s
ON d.stor_id=s.stor_id;

```

## 11.&nbsp;Select all store names and the discounts they offer.

       - This time, we don't want do display stores that don't offer any
         discount.

    Hint: change the join type!
"""

(
    stores.join(
        discounts.set_index('stor_id'), on='stor_id', how='inner')
    [['stor_name', 'stor_id', 'discount']]
)

"""### Hint:

In SQL the syntax is:

```sql
select St.stor_name,St.stor_id ,D.discount
from  stores St
inner join discounts  D on St.stor_id=D.stor_id ;
```
"""